[0.011s] Invoking command in '/home/xyq/Desktop/boom_ws/build/resolve': CMAKE_PREFIX_PATH=/home/xyq/Desktop/boom_ws/install/vision_interfaces:/home/xyq/Desktop/boom_ws/install/serial:/home/xyq/Desktop/boom_ws/install/resolve:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver:/home/xyq/Desktop/boom_ws/install/display:/opt/ros/humble LD_LIBRARY_PATH=/home/xyq/Desktop/boom_ws/install/vision_interfaces/lib:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/tmp/.mount_cursorJLXbVl/usr/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32 /usr/bin/cmake --build /home/xyq/Desktop/boom_ws/build/resolve -- -j20 -l20
[0.054s] [35m[1mConsolidate compiler generated dependencies of target resolve[0m
[0.071s] [ 50%] [32mBuilding CXX object CMakeFiles/resolve.dir/src/resolve_node.cpp.o[0m
[2.173s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:[m[K In member function â€˜[01m[Kvoid Resolve::Send(std::string, std::string)[m[Kâ€™:
[2.173s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:70:32:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::__cxx11::basic_string<char>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
[2.173s]    70 |                 for (int i=0; [01;35m[Ki<center_x.length()[m[K; i++) {
[2.173s]       |                               [01;35m[K~^~~~~~~~~~~~~~~~~~[m[K
[2.173s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:76:32:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::__cxx11::basic_string<char>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
[2.173s]    76 |                 for (int i=0; [01;35m[Ki<center_y.length()[m[K; i++) {
[2.173s]       |                               [01;35m[K~^~~~~~~~~~~~~~~~~~[m[K
[2.179s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:[m[K In member function â€˜[01m[Kvoid Resolve::ImageResolveCallback(const ConstSharedPtr&)[m[Kâ€™:
[2.180s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:125:23:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<std::vector<cv::Point_<int> > >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
[2.180s]   125 |         for (int i=0;[01;35m[Ki<contours.size()[m[K; i++) {
[2.180s]       |                      [01;35m[K~^~~~~~~~~~~~~~~~[m[K
[2.656s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.656s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.656s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:40[m[K,
[2.656s]                  from [01m[K/opt/ros/humble/include/image_transport/image_transport/subscriber.hpp:36[m[K,
[2.656s]                  from [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:2[m[K:
[2.656s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.656s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.657s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.657s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.657s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.657s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:[m[K   required from here
[2.657s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>[m[Kâ€™})
[2.657s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.657s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.657s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.657s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.657s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:40[m[K,
[2.657s]                  from [01m[K/opt/ros/humble/include/image_transport/image_transport/subscriber.hpp:36[m[K,
[2.657s]                  from [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:2[m[K:
[2.658s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.658s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.658s]       |         [01;36m[K^~~~~~~~[m[K
[2.658s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.658s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.658s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>][m[Kâ€™
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.658s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:[m[K   required from here
[2.658s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.658s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.658s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.658s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.658s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.659s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.659s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.659s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.659s] [01m[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:[m[K   required from here
[2.659s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.659s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.659s]       |                [01;36m[K^~~~~~~~[m[K
[2.659s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.659s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.659s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.659s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.659s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.659s]       |                [01;36m[K^~~~~~~~[m[K
[2.659s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.659s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.659s]       |                          [01;36m[K^~~~~~~~~[m[K
[4.076s] gmake[2]: *** [CMakeFiles/resolve.dir/build.make:76ï¼šCMakeFiles/resolve.dir/src/resolve_node.cpp.o] é”™è¯¯ 1
[4.076s] gmake[1]: *** [CMakeFiles/Makefile2:137ï¼šCMakeFiles/resolve.dir/all] é”™è¯¯ 2
[4.076s] gmake: *** [Makefile:146ï¼šall] é”™è¯¯ 2
[4.078s] Invoked command in '/home/xyq/Desktop/boom_ws/build/resolve' returned '2': CMAKE_PREFIX_PATH=/home/xyq/Desktop/boom_ws/install/vision_interfaces:/home/xyq/Desktop/boom_ws/install/serial:/home/xyq/Desktop/boom_ws/install/resolve:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver:/home/xyq/Desktop/boom_ws/install/display:/opt/ros/humble LD_LIBRARY_PATH=/home/xyq/Desktop/boom_ws/install/vision_interfaces/lib:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/tmp/.mount_cursorJLXbVl/usr/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32 /usr/bin/cmake --build /home/xyq/Desktop/boom_ws/build/resolve -- -j20 -l20
