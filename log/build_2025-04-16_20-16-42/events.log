[0.000000] (-) TimerEvent: {}
[0.000205] (-) JobUnselected: {'identifier': 'display'}
[0.000298] (-) JobUnselected: {'identifier': 'hik_camera_ros2_driver'}
[0.000331] (-) JobUnselected: {'identifier': 'serial'}
[0.000359] (-) JobUnselected: {'identifier': 'vision_interfaces'}
[0.000399] (resolve) JobQueued: {'identifier': 'resolve', 'dependencies': OrderedDict([('vision_interfaces', '/home/xyq/Desktop/boom_ws/install/vision_interfaces')])}
[0.000436] (resolve) JobStarted: {'identifier': 'resolve'}
[0.008862] (resolve) JobProgress: {'identifier': 'resolve', 'progress': 'cmake'}
[0.009266] (resolve) JobProgress: {'identifier': 'resolve', 'progress': 'build'}
[0.009796] (resolve) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/xyq/Desktop/boom_ws/build/resolve', '--', '-j20', '-l20'], 'cwd': '/home/xyq/Desktop/boom_ws/build/resolve', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('LIBRARY_PATH', '/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:'), ('MY_PATH', '/home/xyq/.local/bin:/home/xyq/.local/lib/python3.10/site-packages:/home/xyq/.nvm/versions/node/v20.18.1/bin:/opt/ros/humble/bin:/tmp/.mount_cursorJLXbVl:/tmp/.mount_cursorJLXbVl/usr/sbin:/home/xyq/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/home/xyq/.local/share/JetBrains/Toolbox/scripts:/opt/Typora-linux-x64:/usr/include/c++/11/:/home/xyq/.local/share/JetBrains/Toolbox/scripts:/home/xyq'), ('USER', 'xyq'), ('LANGUAGE', 'zh_CN:zh'), ('XDG_SESSION_TYPE', 'x11'), ('ALLUSERSPROFILE', '/opt/MVS/MVFG'), ('GIT_ASKPASS', '/tmp/.mount_cursorJLXbVl/resources/app/extensions/git/dist/askpass.sh'), ('ROS_PACKAGE_PATH', '/opt/ros/humble/share'), ('LD_LIBRARY_PATH', '/home/xyq/Desktop/boom_ws/install/vision_interfaces/lib:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib/nvonnxparser:/home/xyq/env/TensorRT-10.5.0.18.Linux.x86_64-gnu.cuda-12.6/TensorRT-10.5.0.18/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/tmp/.mount_cursorJLXbVl/usr/lib:/opt/MVS/lib/64:/opt/MVS/lib/32:/opt/MVS/lib/64:/opt/MVS/lib/32'), ('SHLVL', '2'), ('HOME', '/home/xyq'), ('APPDIR', '/tmp/.mount_cursorJLXbVl'), ('CHROME_DESKTOP', 'cursor-url-handler.desktop'), ('TERM_PROGRAM_VERSION', '0.45.14'), ('DESKTOP_SESSION', 'ubuntu'), ('NVM_BIN', '/home/xyq/.nvm/versions/node/v20.18.1/bin'), ('NVM_INC', '/home/xyq/.nvm/versions/node/v20.18.1/include/node'), ('GTK_MODULES', 'gail:atk-bridge'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('VSCODE_GIT_ASKPASS_MAIN', '/tmp/.mount_cursorJLXbVl/resources/app/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/tmp/.mount_cursorJLXbVl/cursor'), ('MANAGERPID', '2054'), ('SYSTEMD_EXEC_PID', '2391'), ('DBUS_STARTER_BUS_TYPE', 'session'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus,guid=b2cc7aec249de39d5a4c011d67ff889f'), ('COLORTERM', 'truecolor'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5961'), ('NVM_DIR', '/home/xyq/.nvm'), ('OMF_PATH', '/home/xyq/.local/share/omf'), ('QT_QPA_PLATFORMTHEME', 'qt5ct'), ('COLCON_PREFIX_PATH', '/home/xyq/Desktop/boom_ws/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'xyq'), ('OWD', '/home/xyq/Downloads'), ('JOURNAL_STREAM', '8:26668'), ('XDG_SESSION_CLASS', 'user'), ('ROS_VERSION', '2'), ('USERNAME', 'xyq'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('MVCAM_SDK_PATH', '/opt/MVS'), ('PATH', '/home/xyq/.local/bin:/home/xyq/.local/lib/python3.10/site-packages:/home/xyq/.nvm/versions/node/v20.18.1/bin:/opt/ros/humble/bin:/tmp/.mount_cursorJLXbVl:/tmp/.mount_cursorJLXbVl/usr/sbin:/home/xyq/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/home/xyq/.local/share/JetBrains/Toolbox/scripts:/opt/Typora-linux-x64:/usr/include/c++/11/:/home/xyq/.local/share/JetBrains/Toolbox/scripts:/opt/Typora-linux-x64:/usr/include/c++/11/'), ('INVOCATION_ID', '9fe04a1c445a4c9797871ae885f05e88'), ('APPIMAGE', '/home/xyq/Downloads/cursor-0.45.14-build-250219jnihavxsz-x86_64.AppImage'), ('MVCAM_GENICAM_CLPROTOCOL', '/opt/MVS/lib/CLProtocol'), ('SESSION_MANAGER', 'local/xyq-Legion-Y7000P-IRH8:@/tmp/.ICE-unix/2391,unix/xyq-Legion-Y7000P-IRH8:/tmp/.ICE-unix/2391'), ('XDG_MENU_PREFIX', 'gnome-'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('GDK_BACKEND', 'x11'), ('DISPLAY', ':1'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LANG', 'zh_CN.UTF-8'), ('VSCODE_INJECTION', '1'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('CURSOR_TRACE_ID', 'aa6ec17fa21c44df9ef7490641795b1b'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-a2c3640f6d.sock'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('TERM_PROGRAM', 'vscode'), ('XMODIFIERS', '@im=ibus'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('GSETTINGS_SCHEMA_DIR', '/tmp/.mount_cursorJLXbVl/usr/share/glib-2.0/schemas:'), ('VSCODE_STABLE', '1'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/xyq/Desktop/boom_ws/install/serial:/home/xyq/Desktop/boom_ws/install/resolve:/home/xyq/Desktop/boom_ws/install/vision_interfaces:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver:/home/xyq/Desktop/boom_ws/install/display:/opt/ros/humble'), ('ARGV0', '/home/xyq/Downloads/cursor-0.45.14-build-250219jnihavxsz-x86_64.AppImage'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('QT_IM_MODULE', 'ibus'), ('VSCODE_NONCE', 'f5b8ad04-2d43-4e0e-89b5-a62f139c0a5f'), ('PWD', '/home/xyq/Desktop/boom_ws/build/resolve'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('DBUS_STARTER_ADDRESS', 'unix:path=/run/user/1000/bus,guid=b2cc7aec249de39d5a4c011d67ff889f'), ('NVM_CD_FLAGS', ''), ('OMF_CONFIG', '/home/xyq/.config/omf'), ('XDG_DATA_DIRS', '/tmp/.mount_cursorJLXbVl/usr/share/:./share/:/usr/share/gnome:/usr/local/share/:/usr/share/:/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop:/usr/share/gnome/:/usr/local/share/:/usr/share/'), ('PYTHONPATH', '/home/xyq/Desktop/boom_ws/install/vision_interfaces/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/xyq/Desktop/boom_ws/install/vision_interfaces:/home/xyq/Desktop/boom_ws/install/serial:/home/xyq/Desktop/boom_ws/install/resolve:/home/xyq/Desktop/boom_ws/install/hik_camera_ros2_driver:/home/xyq/Desktop/boom_ws/install/display:/opt/ros/humble'), ('MVCAM_COMMON_RUNENV', '/opt/MVS/lib')]), 'shell': False}
[0.054693] (resolve) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target resolve\x1b[0m\n'}
[0.071766] (resolve) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/resolve.dir/src/resolve_node.cpp.o\x1b[0m\n'}
[0.099495] (-) TimerEvent: {}
[0.199754] (-) TimerEvent: {}
[0.300025] (-) TimerEvent: {}
[0.400403] (-) TimerEvent: {}
[0.500746] (-) TimerEvent: {}
[0.601094] (-) TimerEvent: {}
[0.701449] (-) TimerEvent: {}
[0.801737] (-) TimerEvent: {}
[0.902127] (-) TimerEvent: {}
[1.002488] (-) TimerEvent: {}
[1.102829] (-) TimerEvent: {}
[1.203177] (-) TimerEvent: {}
[1.303563] (-) TimerEvent: {}
[1.403915] (-) TimerEvent: {}
[1.504269] (-) TimerEvent: {}
[1.604618] (-) TimerEvent: {}
[1.704964] (-) TimerEvent: {}
[1.805258] (-) TimerEvent: {}
[1.905602] (-) TimerEvent: {}
[2.005976] (-) TimerEvent: {}
[2.106267] (-) TimerEvent: {}
[2.173374] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid Resolve::Send(std::string, std::string)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.173540] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:70:32:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::__cxx11::basic_string<char>::size_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99} [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.173589] (resolve) StderrLine: {'line': b'   70 |                 for (int i=0; \x1b[01;35m\x1b[Ki<center_x.length()\x1b[m\x1b[K; i++) {\n'}
[2.173627] (resolve) StderrLine: {'line': b'      |                               \x1b[01;35m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.173662] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:76:32:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::__cxx11::basic_string<char>::size_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99} [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.173698] (resolve) StderrLine: {'line': b'   76 |                 for (int i=0; \x1b[01;35m\x1b[Ki<center_y.length()\x1b[m\x1b[K; i++) {\n'}
[2.173732] (resolve) StderrLine: {'line': b'      |                               \x1b[01;35m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.179863] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid Resolve::ImageResolveCallback(const ConstSharedPtr&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.179950] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:125:23:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::vector<std::vector<cv::Point_<int> > >::size_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99} [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.180001] (resolve) StderrLine: {'line': b'  125 |         for (int i=0;\x1b[01;35m\x1b[Ki<contours.size()\x1b[m\x1b[K; i++) {\n'}
[2.180034] (resolve) StderrLine: {'line': b'      |                      \x1b[01;35m\x1b[K~^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.206373] (-) TimerEvent: {}
[2.306650] (-) TimerEvent: {}
[2.406919] (-) TimerEvent: {}
[2.507267] (-) TimerEvent: {}
[2.607625] (-) TimerEvent: {}
[2.656091] (resolve) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[2.656300] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[2.656357] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:40\x1b[m\x1b[K,\n'}
[2.656415] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/image_transport/image_transport/subscriber.hpp:36\x1b[m\x1b[K,\n'}
[2.656460] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:2\x1b[m\x1b[K:\n'}
[2.656511] (resolve) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.656754] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.656862] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.656967] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.657019] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.657096] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:\x1b[m\x1b[K   required from here\n'}
[2.657145] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[2.657586] (resolve) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[2.657649] (resolve) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.657696] (resolve) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[2.657739] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[2.657780] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:40\x1b[m\x1b[K,\n'}
[2.657821] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/image_transport/image_transport/subscriber.hpp:36\x1b[m\x1b[K,\n'}
[2.657862] (resolve) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:2\x1b[m\x1b[K:\n'}
[2.657901] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658003] (resolve) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[2.658042] (resolve) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.658081] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.658122] (resolve) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.658203] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658367] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658425] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658478] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658531] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658583] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658635] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:\x1b[m\x1b[K   required from here\n'}
[2.658683] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658731] (resolve) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[2.658778] (resolve) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.658825] (resolve) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.658874] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658928] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = vision_interfaces::msg::Uart_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.658980] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659030] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = vision_interfaces::msg::Uart_<std::allocator<void> >; CallbackT = std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<vision_interfaces::msg::Uart_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<vision_interfaces::msg::Uart_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659079] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/home/xyq/Desktop/boom_ws/src/resolving/src/resolve_node.cpp:62:83:\x1b[m\x1b[K   required from here\n'}
[2.659125] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659187] (resolve) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[2.659236] (resolve) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.659283] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659341] (resolve) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[2.659387] (resolve) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.659432] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659491] (resolve) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[2.659537] (resolve) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.659582] (resolve) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<vision_interfaces::msg::Uart_<std::allocator<void> >, std::_Bind<void (Resolve::*(Resolve*, std::_Placeholder<1>))(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&)>, std::function<void(const vision_interfaces::msg::Uart_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<vision_interfaces::msg::Uart_<std::allocator<void> >, std::default_delete<vision_interfaces::msg::Uart_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const vision_interfaces::msg::Uart_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<vision_interfaces::msg::Uart_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.659641] (resolve) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[2.659686] (resolve) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[2.707831] (-) TimerEvent: {}
[2.808114] (-) TimerEvent: {}
[2.908477] (-) TimerEvent: {}
[3.008729] (-) TimerEvent: {}
[3.109074] (-) TimerEvent: {}
[3.209453] (-) TimerEvent: {}
[3.309835] (-) TimerEvent: {}
[3.410193] (-) TimerEvent: {}
[3.510526] (-) TimerEvent: {}
[3.610877] (-) TimerEvent: {}
[3.711234] (-) TimerEvent: {}
[3.811574] (-) TimerEvent: {}
[3.911931] (-) TimerEvent: {}
[4.012294] (-) TimerEvent: {}
[4.076336] (resolve) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/resolve.dir/build.make:76\xef\xbc\x9aCMakeFiles/resolve.dir/src/resolve_node.cpp.o] \xe9\x94\x99\xe8\xaf\xaf 1\n'}
[4.076546] (resolve) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137\xef\xbc\x9aCMakeFiles/resolve.dir/all] \xe9\x94\x99\xe8\xaf\xaf 2\n'}
[4.076759] (resolve) StderrLine: {'line': b'gmake: *** [Makefile:146\xef\xbc\x9aall] \xe9\x94\x99\xe8\xaf\xaf 2\n'}
[4.078615] (resolve) CommandEnded: {'returncode': 2}
[4.085205] (resolve) JobEnded: {'identifier': 'resolve', 'rc': 2}
[4.095675] (-) EventReactorShutdown: {}
